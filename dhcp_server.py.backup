import paramiko
import sys
import os
import ipaddress
import socket

# Variables to receive from GUI
Enable = True
Apply   = True
Interface = 'eth0'
Network = '192.168.1.0'+ '/' + '24'
Gateway = '192.168.1.1'
Pool_Range = ['192.168.1.2','192.168.1.254']
DNS_Server = ['8.8.8.8',',9.9.9.9']
NTP_Server = '192.168.1.1'
Lease_Time = ['12','00','00']
Add_ARP = False

# Transitive Variables
Servers = ''

# IP calculations 
Netmask = str(ipaddress.ip_network(Network).netmask) # makes the Netmask calculation using the variable Network

Broadcast = str(ipaddress.ip_network(Network).broadcast_address)

Pool_Network_Size = len(list(ipaddress.ip_network(Network).hosts()))-1 # makes the calculation using the variable Network

Pool_Range_Size = (int(ipaddress.IPv4Address(Pool_Range[1])) - int(ipaddress.IPv4Address(Pool_Range[0])))+1 # makes the calculation using Pool_Range

Private= ipaddress.ip_network(Network).is_private #check if the network is private

Range_Valid = False if Pool_Range_Size - Pool_Network_Size > 0 else True #Check if the range length is valid

Lease_Time_secs = int(Lease_Time[0])*3600+int(Lease_Time[1])*60+int(Lease_Time[2])

# Communication with the router
# -------------------------------------------------------------
#ssh = paramiko.SSHClient()
#ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

#ssh.connect('10.10.42.8',port=22,username='dirac',password='bucarest')
#sftp = ssh.open_sftp()

#isc_dhcp_server = sftp.open('/etc/default/isc-dhcp-server','a')
#dhcpd = stfp.open('/etc/dhcpd.conf','a')

# -------------------------------------------------------------

# if Interface != Any other interface:
    # Delete all file conf file and rewrite them
    # It must renew all static leases
    #else:
        # Append New configuration file new

dhcp_dir = os.listdir('/home/dirac/fake_etc/')
for files in dhcp_dir:
    if files == Interface + '.conf':
        print('The file exists')
        os.remove('/home/dirac/fake_etc/'+ Interface + '.conf')

dhcpd = open('/home/dirac/fake_etc/'+ Interface + '.conf','a') #For testing

# writing the data into the configuration file
# Add #eth0 in all lines regarding the eth0 configuration and then use regex to search them and replace the beggining of the line with a # in case of disabling of enabling the dhcp
dhcpd.writelines('#eth0 dhcp server configuration \n')
l1 = 'subnet' + ' ' + Network + ' ' + Netmask + ' ' + '{'
l2 = 'interface' + ' ' + Interface + ';'
if Add_ARP == True:
    l3 = 'authoritative' + ';'
else:
    l3 = '#authoritative' + ';'
l4 = 'range' + ' ' +  Pool_Range[0] + ' ' + Pool_Range[1] + ';'
l5 = 'option routers' + ' ' +  Gateway + ';'
l6 = 'option subnet-mask' + ' ' + Netmask + ';'
l7 = 'option broadcast-address' + ' ' +  Broadcast + ';'
l8 = 'option domain-name-servers' + ' ' + DNS_Server[0] + ' ' + DNS_Server[1] + ';'
l9 = 'option ntp-server' + ' ' + NTP_Server + ';'
l10 = 'max-lease-time' + ' ' +  str(Lease_Time_secs) + ';'
data = [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10,'}','']

dhcpd.writelines('\n'.join(data))
dhcpd.writelines('#end of eth0 dhcp server configuration')
dhcpd.close()
# -------------------------------------------------------------



#things to change 
## /etc/default/isc-dhcp-server
# INTERFACESv4='Interface'

